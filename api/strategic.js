// api/strategic.js

import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  try {
    // Health-check para GET
    if (req.method === "GET") {
      return res.status(200).json({ status: "ü§ñ Strategic Agent ativo!" });
    }

    // L√≥gica principal para POST
    if (req.method === "POST") {
      const { objetivo, persona, performance } = req.body;
      if (!objetivo || !persona?.perfil || !performance?.views) {
  return res
    .status(400)
    .json({ error: "Faltam campos obrigat√≥rios: objetivo, persona.perfil ou performance.views." });
}

      // dentro de api/strategic.js, no handler POST:

const messages = [
  {
    role: "system",
    content: "Voc√™ √© um consultor estrat√©gico de marketing digital, especialista em perfis de criadoras de conte√∫do."
  },
  {
    role: "user",
    content: `
Meta de neg√≥cio: ${objetivo}

Detalhes da persona:
- Perfil: ${persona.perfil}
- Faixa et√°ria: ${persona.faixa_etaria}
- N√≠vel de conhecimento: ${persona.nivel_conhecimento}
- Principais problemas:
  ‚Ä¢ ${persona.problemas.join("\n  ‚Ä¢ ")}
- Desejos e motiva√ß√µes:
  ‚Ä¢ ${persona.desejos.join("\n  ‚Ä¢ ")}

Dados de performance recentes:
- Views: ${performance.views}
- Salvamentos: ${performance.salvamentos}
- Compartilhamentos: ${performance.compartilhamentos}
- Novos seguidores: ${performance.novos_seguidores}

Com base nisso, gere:
1. Um plano de conte√∫do de 4 semanas (tema + formato) alinhado a essa persona.
2. 3 ganchos textuais por semana que falem diretamente das dores e desejos listados.
3. Sugest√£o de CTA para cada post.
4. Principais KPIs a monitorar a cada semana.
    `
  }
];


      const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages,
        temperature: 0.7,
        max_tokens: 600,
      });

      const plano = completion.choices[0].message.content.trim();
      return res.status(200).json({ plano });
    }

    // M√©todos n√£o suportados
    res.setHeader("Allow", ["GET", "POST"]);
    return res.status(405).end(`M√©todo ${req.method} n√£o permitido`);
  } catch (err) {
    console.error("Erro no Strategic Agent:", err);
    return res.status(500).json({ error: err.message || String(err) });
  }
}
